<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>sk.vava</groupId>
    <artifactId>royalmate</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>royalmate</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.2</junit.version>
        <javafx.version>17.0.10</javafx.version> <!-- Updated to a more recent patch of 17 -->
        <maven.compiler.release>17</maven.compiler.release> <!-- Use release instead of source/target -->
        <lombok.version>1.18.30</lombok.version> <!-- Define Lombok version as property -->

        <!-- Define the main class for the JAR entry point (the one with public static void main) -->
        <launcher.main.class>sk.vava.royalmate.app.Main</launcher.main.class>
        <!-- Define the main class that extends javafx.application.Application -->
        <javafx.main.class>sk.vava.royalmate.app.RoyalMate</javafx.main.class>
    </properties>

    <dependencies>
        <!-- JavaFX -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- javafx-graphics is usually included transitively by javafx-controls -->
        <!-- Add if needed explicitly, but often redundant -->
        <!--
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        -->

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- BCrypt -->
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- MySQL Connector -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.0.33</version>
        </dependency>

        <!-- JUnit (for testing) -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Compiler Plugin with Lombok Configuration -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <!-- Using release property defined above -->
                    <!-- <source>17</source> -->
                    <!-- <target>17</target> -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version> <!-- Use property -->
                        </path>
                        <!-- Add other annotation processors here if needed -->
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- JavaFX Maven Plugin -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <!-- Use the correct JavaFX Application class -->
                    <mainClass>${javafx.main.class}</mainClass>
                    <!-- Other configuration options -->
                    <launcher>royalmate-launcher</launcher> <!-- Give launcher a specific name -->
                    <jlinkZipName>royalmate-jlink</jlinkZipName>
                    <jlinkImageName>royalmate-image</jlinkImageName>
                    <noManPages>true</noManPages>
                    <stripDebug>true</stripDebug>
                    <noHeaderFiles>true</noHeaderFiles>
                </configuration>
                <!-- Execution needed if you want to use goals like javafx:run or javafx:jlink -->
                <!-- Keep if you use these goals -->
                <executions>
                    <execution>
                        <id>default-cli</id>
                        <!-- Configuration here applies specifically to command-line execution -->
                        <!-- Often redundant if top-level configuration is set -->
                    </execution>
                </executions>
            </plugin>

            <!-- Shade Plugin for Uber-JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.1</version> <!-- Specify a recent version -->
                <executions>
                    <execution>
                        <phase>package</phase> <!-- Bind to package phase -->
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>uber</shadedClassifierName> <!-- Optional: name for shaded jar -->
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <!-- Use the correct Main class for JAR execution -->
                                    <mainClass>${launcher.main.class}</mainClass>
                                </transformer>
                            </transformers>
                            <!-- Filter to avoid signing issues if dependencies are signed -->
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>